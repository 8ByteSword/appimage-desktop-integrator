#!/bin/bash

# Test script to reproduce the actual reported issues
set -uo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ISOLATED_ROOT="/tmp/appimage_real_test_$$"
ISOLATED_HOME="$ISOLATED_ROOT/home"

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_header() { echo -e "${BOLD}${BLUE}$1${NC}"; }

cleanup() {
    if [[ -d "$ISOLATED_ROOT" ]]; then
        log_info "Cleaning up test environment..."
        rm -rf "$ISOLATED_ROOT"
    fi
}
trap cleanup EXIT

setup_isolated_environment() {
    log_header "Setting up isolated test environment"
    
    mkdir -p "$ISOLATED_HOME"/{.config/appimage_desktop_integrator,.local/share/{applications,icons},Downloads,Applications}
    mkdir -p "$ISOLATED_ROOT/bin"
    
    # Create isolated config
    cat > "$ISOLATED_HOME/.config/appimage_desktop_integrator/config.ini" <<EOF
icons_dir=$ISOLATED_HOME/.local/share/icons/appimage-integrator
update_dir=$ISOLATED_HOME/.local/share/applications
appimages_dirs=("$ISOLATED_HOME/Applications")
EOF
    
    # Set version to avoid upgrade prompts
    echo "2.0.2" > "$ISOLATED_HOME/.config/appimage_desktop_integrator/VERSION"
    
    # Copy main script
    cp "$SCRIPT_DIR/install_appimages.sh" "$ISOLATED_ROOT/bin/ai"
    chmod +x "$ISOLATED_ROOT/bin/ai"
    
    # Create wrapper script
    cat > "$ISOLATED_ROOT/bin/ai_test" <<EOF
#!/bin/bash
export HOME="$ISOLATED_HOME"
export XDG_CONFIG_HOME="$ISOLATED_HOME/.config"
export XDG_DATA_HOME="$ISOLATED_HOME/.local/share"
cd "$ISOLATED_HOME"
"$ISOLATED_ROOT/bin/ai" "\$@"
EOF
    chmod +x "$ISOLATED_ROOT/bin/ai_test"
    
    log_success "Isolated environment ready"
}

test_issue_5_real_scenario() {
    log_header "Testing Issue #5: Real scenario with MediaElch AppImage"
    
    # Copy the real MediaElch AppImage to isolated home
    cp "$SCRIPT_DIR/appimage_files/MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage" "$ISOLATED_HOME/"
    cd "$ISOLATED_HOME"
    
    log_info "Testing with real MediaElch AppImage in current directory"
    log_info "This should reproduce the appimage_path assignment bug"
    
    # Create a simple non-interactive version of the install function to test
    cat > "$ISOLATED_ROOT/test_install.sh" <<'EOF'
#!/bin/bash
source "$1"  # Source the main script

# Test the problematic logic directly
appimage_path="MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage"
appimage_name=$(basename "$appimage_path")
original_path=$(dirname "$appimage_path")
target_dir="$HOME/Applications"

echo "Debug info:"
echo "  appimage_path (initial): $appimage_path"
echo "  appimage_name: $appimage_name"  
echo "  original_path (dirname result): $original_path"
echo "  target_dir: $target_dir"
echo

# Test the current buggy logic
if [ "$original_path" != "$target_dir" ]; then
    echo "Would move $appimage_name to $target_dir..."
    # Don't actually move in test
    appimage_path_after_move="$target_dir/$appimage_name"
    echo "  appimage_path would be updated to: $appimage_path_after_move"
else
    echo "No move needed (original_path == target_dir)"
    echo "  appimage_path remains: $appimage_path"
fi

echo
echo "ISSUE: When dirname returns '.', appimage_path is not updated to full path!"
echo "Expected: $target_dir/$appimage_name"
echo "Actual: $appimage_path"

if [[ "$appimage_path" == *"$target_dir"* ]]; then
    echo "✓ PASS: appimage_path contains target directory"
    exit 0
else
    echo "✗ FAIL: appimage_path does not contain target directory"
    exit 1
fi
EOF
    
    chmod +x "$ISOLATED_ROOT/test_install.sh"
    
    # Run the test
    if "$ISOLATED_ROOT/test_install.sh" "$ISOLATED_ROOT/bin/ai"; then
        log_error "Issue #5: Test should have failed but passed - this indicates the bug exists"
        return 1
    else
        log_success "Issue #5: Successfully reproduced the appimage_path assignment bug"
        return 0
    fi
}

test_issue_6_remove_command() {
    log_header "Testing Issue #6: 'ai remove' command local variable errors"
    
    cd "$ISOLATED_HOME"
    
    # First install an AppImage to have something to remove
    log_info "First installing MediaElch to have something to remove..."
    
    # Create a desktop file manually for testing removal
    mkdir -p "$ISOLATED_HOME/.local/share/applications"
    cat > "$ISOLATED_HOME/.local/share/applications/MediaElch.desktop" <<EOF
[Desktop Entry]
Name=MediaElch
Exec=/path/to/MediaElch.AppImage
Icon=mediaelch
Type=Application
Categories=AudioVideo;
Comment=Generated by AppImage Integrator
EOF
    
    log_info "Testing 'ai remove' command - this should show local variable errors"
    
    # Try to run the remove command and capture the error
    if output=$("$ISOLATED_ROOT/bin/ai_test" remove MediaElch 2>&1); then
        log_error "Remove command succeeded when it should have failed due to local variable errors"
        echo "Output: $output"
        return 1
    else
        log_info "Remove command failed as expected. Output:"
        echo "$output"
        
        if echo "$output" | grep -q "local.*función\|local.*function"; then
            log_success "Issue #6: Successfully reproduced the local variable scoping error"
            return 0
        else
            log_error "Remove command failed but not due to the expected local variable error"
            return 1
        fi
    fi
}

test_timeout_abort_message() {
    log_header "Testing timeout abort message issue"
    
    cd "$ISOLATED_HOME"
    cp "$SCRIPT_DIR/appimage_files/MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage" "$ISOLATED_HOME/"
    chmod +x MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage
    
    log_info "Testing the timeout command that produces 'Abortado' message"
    
    # Test the exact command from line 738
    log_info "Running: DISPLAY= timeout 2 \"./MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage\" --help"
    
    if output=$(DISPLAY= timeout 2 "./MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage" --help 2>&1); then
        log_info "Command succeeded, output: $output"
    else
        log_info "Command failed (expected due to timeout), checking for abort message..."
        
        # Run again and capture stderr
        error_output=$(DISPLAY= timeout 2 "./MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage" --help 2>&1 || true)
        echo "Error output: $error_output"
        
        if echo "$error_output" | grep -qi "abort\|abortado"; then
            log_success "Successfully reproduced the 'Abortado' timeout message"
            return 0
        else
            log_info "No abort message found, but this might be environment dependent"
            return 0
        fi
    fi
}

main() {
    log_header "Real Issue Reproduction Test"
    echo
    
    setup_isolated_environment
    echo
    
    log_info "Testing with real MediaElch AppImage: MediaElch_linux_2.12.0_2024-10-13_git-8032465.AppImage"
    echo
    
    # Test each issue
    test_issue_5_real_scenario
    echo
    
    test_issue_6_remove_command  
    echo
    
    test_timeout_abort_message
    echo
    
    log_header "Issue reproduction test completed"
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi